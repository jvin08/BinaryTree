
 // Definition for a binary tree node.

  function TreeNode(val, left, right) {
      this.val = (val===undefined ? 0 : val)
      this.left = (left===undefined ? null : left)
      this.right = (right===undefined ? null : right)
  }

var oneNode = new TreeNode(1)
oneNode.left = new TreeNode(2)
oneNode.left.left = new TreeNode(4)
// oneNode.left.left.left = new TreeNode(60)
// oneNode.left.left.right = new TreeNode(66)

oneNode.right = new TreeNode(3)
oneNode.right.right = new TreeNode(5)
// oneNode.right.right.right = new TreeNode(70)
// oneNode.right.right.right.left = new TreeNode(88)

// oneNode.right.right.right.right = new TreeNode(80)
// oneNode.right.right.right.right.left = new TreeNode(90)
// oneNode.right.right.right.left.left.right = new TreeNode(99)


 
/**
 * @param {TreeNode} root
 * @return {number}
 */

var maxDepth = function(root){
  let countNew = 0;
  if(!root){
    return countNew;
  } else {
     let sumOfNode = function(root) {
              countNew++;
              console.log("root.val: " + root.val)
              let left = root.left
              let right = root.right 
              if(left && !right || right && !left){
                countNew--;//We have to substract because path to the deepest node goes through only one node
              }
              if (left) {
                // countNew++;
                sumOfNode(left);//Going left we count
              }
              if (right) {
                // countNew++;
                sumOfNode(right);//Going right we count
              }
            }
        sumOfNode(root);   
        }
   return countNew
}

console.log(maxDepth(oneNode));