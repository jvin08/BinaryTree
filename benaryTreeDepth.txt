
 // Definition for a binary tree node.

  function TreeNode(val, left, right) {
      this.val = (val===undefined ? 0 : val)
      this.left = (left===undefined ? null : left)
      this.right = (right===undefined ? null : right)
  }

var oneNode = new TreeNode(1)
oneNode.left = new TreeNode(2)
oneNode.left.left = new TreeNode(4)
oneNode.right = new TreeNode(3)
oneNode.right.right = new TreeNode(5)
oneNode.right.right.left = new TreeNode(6)
oneNode.right.right.left.left = new TreeNode(6)

 
/**
 * @param {TreeNode} root
 * @return {number}
 */

var nodeSize = function(root){
  let countNode = 0;
  if(!root){
    return countNode;
  } else {
     let sumOfNode = function(root) {
              countNode++;
              let left = root.left
              let right = root.right 
              if (left) {
                sumOfNode(left);
              }
              if (right) {
                sumOfNode(right);
              }
            }
        sumOfNode(root);   
        }
   return countNode
}

var maxDepth = function(root){
  let countDeepestNode = 1;
  if(!root){
    return countDeepestNode;
  } else {
    let left = root.left;
    let right = root.right;
    var leftSize = nodeSize(left)
    var rightSize = nodeSize(right)
  }
  console.log(leftSize + " " + rightSize);
}

console.log(nodeSize(oneNode));
console.log(maxDepth(oneNode))
